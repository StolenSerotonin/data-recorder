import { resolve } from "path";
import { config } from "dotenv-safe";

const { parsed } = config();

export default {
    /**
     * Function that mutates the original webpack config.
     * Supports asynchronous changes when a promise is returned (or it's an async function).
     *
     * @param {object} config - original webpack config.
     * @param {object} env - options passed to the CLI.
     * @param {WebpackConfigHelpers} helpers - object with useful helpers for working with the webpack config.
     * @param {object} options - this is mainly relevant for plugins (will always be empty in the config), default to an empty object
     **/
    webpack(config, env, helpers, options) {
        // config.optimization.splitChunks.minChunks = 1;
        // let css = helpers.getLoadersByName(config, 'css-loader')[0];
        // css.loader.options.modules = false;

        // Rename build files to bundle.js, bundle.css
        // config.output.filename = '[name].js';
        // const { plugin: cssExtractPlugin } = helpers.getPluginsByName(config, 'MiniCssExtractPlugin')[0];
        // cssExtractPlugin.options.moduleFilename = () => 'bundle.css'
        // cssExtractPlugin.options.filename = 'bundle.css';

        // Fix `preload` CSS option breaking in firefox
        // https://github.com/preactjs/preact-cli/issues/710
        const critters = helpers.getPluginsByName(config, "Critters")[0];
        if (critters) {
            critters.plugin.options.preload = "js"; // or some other option
        }

        // dotenv injection
        // https://github.com/preactjs/preact-cli/issues/762
        const { plugin } = helpers.getPluginsByName(config, "DefinePlugin")[0];
        Object.assign(
            plugin.definitions,
            Object.keys(parsed).reduce(
                (env, key) => ({
                    ...env,
                    [`process.env.${key}`]: JSON.stringify(parsed[key])
                }),
                {}
            )
        );

        // Switch css-loader for typings-for-css-modules-loader, which is a wrapper
        // that automatically generates .d.ts files for loaded CSS
        helpers.getLoadersByName(config, "css-loader").forEach(({ loader }) => {
            loader.loader = "typings-for-css-modules-loader";
            loader.options = Object.assign(loader.options, {
                camelCase: true,
                banner:
                    "// This file is automatically generated from your CSS. Any edits will be overwritten.",
                namedExport: true,
                silent: true
            });
        });

        // Use any `index` file, not just index.js
        config.resolve.alias["preact-cli-entrypoint"] = resolve(
            process.cwd(),
            "src",
            "index"
        );
    }
};
